/* Name: Anthony Frazier
 * Class: CSCE355
 * Due Date: November 21, 2017
 * Assignment: Programming Assignment. You may choose to implement two or more of the following functions:
 * 
 */
	
	/* Text Search:
	 * This task is similar to Assignment 4, problem 1. The name of the file containing the
text string is given as the sole command line argument. You should assume that the input
string and the output DFA are both over the alphabet consisting of the 26 lower case letters
abcdefghijklmnopqrstuvwxyz only
	 */
	
	/* Closure Properties: complement and intersection:
	 * There will be either one or two command
line arguments. If one, then it is the name of a file containing the description of a DFA A,
and you are to output the complementary DFA ¬A (see Definition 7.4 of the course notes).
If two arguments, then they both are names of text files containing DFAs A and B, and you
are to output the product construction A ∧ B (see Definition 7.4 of the course notes). A and
B will have the same alphabet. In each case, write to standard output.
	 */
	
	/* Closure Property: Inverse Homomorphic Image:
	 * The first command line argument is the
name of a text file containing the description of the DFA, and the second argument gives
a text file containing the description of the homomorphism. 
	 */
	
	/* Determining properties of a DFA:
	 * The sole command line argument gives the file describing
the DFA. Output is to standard output and consists of just two words separated by
whitespace: the first is either "empty" or "nonempty", and the second is either "finite" or
"infinite". Note that the language of a DFA is nonempty iff some final state is reachable
from the start state, and the language is infinite iff there is some cycle that is reachable from
the start state and from which a final state is reachable
	 */
/*
 * 
 * Required to implement two, but for each task past two, 1% of your final grade for correct implementation
 * 
 * Scripts are located at the following homepage: https://cse.sc.edu/~fenner/csce355/prog-proj/index.html
 * 
 * Program must be able to run via a simple command-line invocation on a GNU/Linux box and all I/O will be ASCII text.
 * Input is read from text files or standard input, and output is written to standard output.
 * 
 * You may assume that the files adhere to their respective formats.
 * Code should be economically written, well structured, well commented, following the common style guidelines.
 * /*
 * * DFA Description Format: If you write a DFA as output, you must use this format. This allows flexibility of using the output of one
 * program as the input to another.
 * Number of states: 5
 * Accepting states: 1 4
 * Alphabet: 01
 * 0 1
 * 2 3
 * 4 0
 * 1 2
 * 3 4
 * 
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Scanner;
import java.lang.*;

public final class MySimulator{
	
public static void main(String[] args) throws IOException
{	//Set up error output. (This code is directly copied from a stack overflow example)
	FileOutputStream f = new FileOutputStream("error_log.txt");	 
	System.setErr(new PrintStream(f));
	
	DFA newDFA = null;
	newDFA = Simulate(args);
	
} // end main

public static DFA Simulate(String[] args) throws IOException
{	/* Simulating a DFA:
	 * First read the description of the DFA. The description is in a file named by
		the first command line argument.
 	*/

	File inputFile1 = null;
	File inputFile2 = null;
	
	DFA newDFA = new DFA();
	// Reads the file from the first argument line only if there is an argument
	if (args.length > 0) inputFile1 = new File(args[0]); 
	
	// Reads the file from the second argument line only if there is an argument
	if (args.length > 1) inputFile2 = new File(args[1]); 
	
	newDFA = DFA.ScanDescription(inputFile1);
	Parse(inputFile2, newDFA);
	return newDFA;
} // end Simulate();

public static void Parse(File inputFile, DFA dfa) throws IOException
{	/* Simulating a DFA:
	 * Read a series of zero or more strings from another text file named by the second command
		line argument. These are inputs to the DFA. Each string will take up an entire line of text,
		ending with a newline character (which is not included in the string). For each string, write
		to standard output either "accept" or "reject" according to the behavior of the DFA on the
		string. End each output word with a newline.
 	*/

	// This scanner scans the second file (the one with strings)
	Scanner input= new Scanner(inputFile);
	boolean accepts = false;
	
	while(input.useDelimiter("\n").hasNext())
	{
		//Read new line
		String str = input.nextLine();
		
		//These two if statements cover our empty string edge case
		if (str.equals("") && dfa.getAccepting()[0] != 0)
		{
			System.out.println("reject");
			str = input.nextLine();
		}
		if (str.equals("") && dfa.getAccepting()[0] == 0)
		{
			System.out.println("accept");
			str = input.nextLine();
		}
		
		//This Traverse call and if else structure covers all
		//  other strings other than empty
		accepts = Traverse(str, dfa);
		
		if (accepts)
		{
			System.out.println("accept");
		}
		else
		{
			System.out.println("reject");
		}
	} // end while
} // end Parse();

public static boolean Traverse(String line, DFA dfa)
{	//Start at starting state, then follow string
	//Scanner input = new Scanner(line);
	int state = 0;
	int index = 0;
	boolean accepted = false;
	
		
	// We have String line which contains the token we scanned from input.
	//  We will iterate over line with charAt.
	for (int x = 0; x < line.length(); x++)
	{
		char alpha = line.charAt(x);
		System.err.println("We just read the token: "+line+" And we read the char: "+alpha+"\n");
	
		// Once we have the char, parse over the language of the DFA, from the []Alphabet
		//  to find the index of the specific letter we're looking for
		for (int i = 0; i < dfa.getAlphabet().length; i++)
		{
			char step = dfa.getAlphabet()[i];
			if (alpha == step)
			{
				index = i;
			}
			
		}			
		// Assign our state to the new state located at transition[state][index]
		state = dfa.getTransition()[state][index];
	} // end for
		
	// Finally, if the state we are now in is contained in the
	//   accepting list, then set accepted=true;
	for (int i = 0; i < dfa.getAccepting().length-1; i++)
	{
		if (state == dfa.getAccepting()[i])
		{
			accepted = true;
		}
	}
	// Else return default accepted = false
	return accepted;
} // end Traverse()
} // end MySimulate()