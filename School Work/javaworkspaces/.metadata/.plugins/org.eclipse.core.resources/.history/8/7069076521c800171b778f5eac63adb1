/* Name: Anthony Frazier
 * Class: CSCE355
 * Due Date: November 21, 2017
 * Assignment: Programming Assignment. You may choose to implement two or more of the following functions:
 * 
 * 	
	
	/* Simulating a DFA:
	 * First read the description of the DFA. The description is in a file named by
the first command line argument (see below for information about the format of this file).
Next read a series of zero or more strings from another text file named by the second command
line argument. These are inputs to the DFA. Each string will take up an entire line of text,
ending with a newline character (which is not included in the string). For each string, write
to standard output either "accept" or "reject" according to the behavior of the DFA on the
string. End each output word with a newline.
	 */
	
	/* Minimizing a DFA:
	 * The input DFA is read from a text file given as the first command line
argument, and the output DFA is written to standard output. You should use the table-of-distinguishable-states
method described in class to do the minimization. You do not need
to output the distinguishability table, but you may optionally do so to standard error if you
want. Both the input and output DFA descriptions adhere to the format described below.
The ordering of the states of the output DFA is not completely determined, so correct answers
may differ up to the ordering of states. That’s OK; we’ll take that into account using our
own script that determines whether two DFAs are the same up to reordering states.
	 */
	
	/* Text Search:
	 * This task is similar to Assignment 4, problem 1. The name of the file containing the
text string is given as the sole command line argument. You should assume that the input
string and the output DFA are both over the alphabet consisting of the 26 lower case letters
abcdefghijklmnopqrstuvwxyz only
	 */
	
	/* Closure Properties: complement and intersection:
	 * There will be either one or two command
line arguments. If one, then it is the name of a file containing the description of a DFA A,
and you are to output the complementary DFA ¬A (see Definition 7.4 of the course notes).
If two arguments, then they both are names of text files containing DFAs A and B, and you
are to output the product construction A ∧ B (see Definition 7.4 of the course notes). A and
B will have the same alphabet. In each case, write to standard output.
	 */
	
	/* Closure Property: Inverse Homomorphic Image:
	 * The first command line argument is the
name of a text file containing the description of the DFA, and the second argument gives
a text file containing the description of the homomorphism. 
	 */
	
	/* Determining properties of a DFA:
	 * The sole command line argument gives the file describing
the DFA. Output is to standard output and consists of just two words separated by
whitespace: the first is either "empty" or "nonempty", and the second is either "finite" or
"infinite". Note that the language of a DFA is nonempty iff some final state is reachable
from the start state, and the language is infinite iff there is some cycle that is reachable from
the start state and from which a final state is reachable
	 */
/*
 * 
 * Required to implement two, but for each task past two, 1% of your final grade for correct implementation
 * 
 * Scripts are located at the following homepage: https://cse.sc.edu/~fenner/csce355/prog-proj/index.html
 * 
 * Program must be able to run via a simple command-line invocation on a GNU/Linux box and all I/O will be ASCII text.
 * Input is read from text files or standard input, and output is written to standard output.
 * 
 * You may assume that the files adhere to their respective formats.
 * Code should be economically written, well structured, well commented, following the common style guidelines.
 * /*
 * * DFA Description Format: If you write a DFA as output, you must use this format. This allows flexibility of using the output of one
 * program as the input to another.
 * Number of states: 5
 * Accepting states: 1 4
 * Alphabet: 01
 * 0 1
 * 2 3
 * 4 0
 * 1 2
 * 3 4
 * 
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.lang.*;

public class MySimulator{
	
public static void main(String[] args)
{
	File inputFile1 = null;
	File inputFile2 = null;
	
	// Reads the file from the first argument line only if there is an argument
	if (args.length > 0) inputFile1 = new File(args[0]); 
	
	// Reads the file from the second argument line only if there is an argument
	if (args.length > 1) inputFile2 = new File(args[1]); 
		
	ScanDescription(inputFile1);
	
} // end main

public static int[][] ScanDescription(File inputFile)
{ 
	// This method will parse over a DFA description, and build:
	//  int[][] dfa consisting of the transition table
	//  int[] accepting consisting of a an array of accepting states 
	//  char[] alphabet consisting of the allowable alphabet of 
	//  the dfa
	
	int[][] dfa = null;
	
	// Only read the input if the file exists.
	try {  
		
		Scanner input= new Scanner(inputFile);
		
		// Initialize variables
		String line = "";
		String token = "";
		int states = 0;
		
		// ** First line (single, positive decimal int): Number of states: n. DFA will have n states, with Q= {0,...,n-1}
		
		// Parse over the first line until we find ":" with custom delimiter
		// 	i.e. removes "Number of states"
		token = input.useDelimiter(":").next();

		// It is important to note that in a n state DFA, we will have states 0 -> n-1
		states = Integer.parseInt(input.nextLine().replaceAll(": | \\s", ""));
		System.out.println("The number of states in this dfa is: " + states);
		System.out.println("Correctly parsed number of states");
		System.out.println();
		
		
		// ** Second line(list of non-negative int): List of states that are accepting. Numbers separated by whitespace, in increasing order.
		
		// Parse over the first line until we find ":" with custom delimiter
		//	i.e. removes "Accepting states:"
		input.useDelimiter(":").next();
		input.useDelimiter("\\s").next();
		
		// Reset our string, create our accepting array and parse next line
		token = "";
		int[] accepting = new int[states-1];
		System.out.println("This is our accepting array: ");
		System.out.println();
		// Parse over the line until we hit \nAlphabet:. Put each int into the accepting array as accepting states.
		for (int i = 0; i < states; i++)
		{
			token = input.useDelimiter("\\s").next();
			if (token.equals("Alphabet:"))
			{
				i = states;
			}
			else
			{
				accepting[i] = Integer.parseInt(token);
				System.out.print(accepting[i] + ",");
			}	
		}
		System.out.println();
		System.out.println("Correctly parsed accepting array.");
		System.out.println();
		
		// ** Third line: Alphabet: followed by a string of chars starting with the first char after the space after the first
		//  colon, and runs through the end of the line (not including final newline).
		//  ALpha is ascii, no carriage returns, line feeds, new lines, etc. Space is allowed. Ascii 32-126 are allowed.
		
		String alpha = input.nextLine();
		// Must account for leading space, and remove it.
		alpha = alpha.substring(1, alpha.length());
		System.out.println("This is the alphabet string: " + alpha);
		
		char[] alphabet = new char[alpha.length()];
		System.out.println("This is the alphabet[] array: ");
		for(int x = 0; x < alpha.length(); x++)
		{
			alphabet[x] = alpha.charAt(x);
			System.out.print(alphabet[x]);
		}
		System.out.println("Correctly parsed alphabet");
		System.out.println();
		// ** Remaining Lines: Transition table: rows of the table are terminated with a newline character.
		//      Each row consists of a sequence of nonnegative int seperated by whitespace, one number for each alphabet symbol.


		// Create our dfa array based on the number of states
		dfa = new int[states-1][alphabet.length];
		
		int count = 0;
		for (int i = 0; i < states-1; i++)
		{
			for (int j = 0; j < alphabet.length; j++)
			{
				dfa[i][j] = input.nextInt();
				System.out.print("State " + i + ": " + alphabet[j] + " transition: " + dfa[i][j] + " ");
				System.out.println("");
			}
			System.out.println("NEXT LINE");
			input.nextLine();
			
		}
		System.out.println("Correctly parsed transition table");
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	}
	return dfa;
}
}